Build Shell is intended to help manage development builds

Often developers end up managing many different environments on their
development machine. The author has multiple different configuration of Qt
build on his development machine, and some have dependencies on other projects
not affiliated with qt-project, and not using qmake.

It is also often cumbersome to move to a different development machine (say to
a laptop for when you go travelling). There is a need to automate
managing the different development environments a developer has. And the
solution should not be bounded to the build system nor the source control
management system.

Build Shell use flow is:
Create build_shell environment:

# Create a build shell from an existing build set file
$ build_shell create -f somebuildset.file -b build_dir -s src_dir
#from this point the somebuildset.file is not used anymore

# Select the newly created build shell with:
$ bss build_dir

# Optionally rename the build shell with so its easier to keep them appart
$ bs_name some_new_name

# build buildset
$ bs build --pull-first

# when the build breaks because of the buildset fix it
$ bs_edit

# then build again from where it stopped
$ bs build project_with_broken_configuration_in_buildset --continue

# some time has passed and you want to update your entire environment
# first get an overview over the repositories so that dirty repos can be
# stashed or changes can be comitted
$ bs status

# Then build the entire buildset but pull "with rebase" changes first
$ bs build --pull-first

# this bs command is also very usefull when you have made a bic incompatible
# change to an library, and need to recompile the stack from the library and up
# Additional flags to the bs function can be:
# --skip-configure --skip-build --clean --deep-clean

Build Shell consists of 4 components:
- build_shell is the main binary which loads buildsets files and avaluates what needs to be done.
- jsonmod is a tool that can be utilized from shellscripts to modify json files
- build_shell_completion.bash this file is intended to be loaded in the users bashrc file.
    It provides usefull bash functions like bss and bs which makes build_shell easy to use
- scripts build shell uses a naming scheme to find scripts that should be run when certain tasks
    should be performed. The scripts are found by itterating over a search path. The naming scheme is
    phase_[project_name|fallback_name]. The fallback_name will vary, dependent on the situation.
    Forinstance build_shell will try and detect the build system in the use that as a fallback. So if
    you don't have a special script to build_qt_declarative, then it will fallback to build_qmake

Build Shell uses a json like format to describe a build, from now called a
buildset. A buildset is fed into the build_shell application together with some
parameters. Most importantly:

-s --src-dir: This is the directory where sources will be pulled down and
looked for when building

-b --build-dir: This is the directory where the projects will make sub
directories and build their projects inside the subdirectories

-i --install-dir: This is the directory where projects that needs to install
files will use as their prefix

-f --buildset: This is the file which is used as input for where to pull
sources down from and how to build them

Also the build_shell executable takes an additional parameter called mode. Mode
can be either:

generate: in the generate mode the build_shell application expects the -s parameter
to be present. It will use this directory to generate a vanilla buildset file.
It can be used in conjunction with the -f parameter. Then build_set will
try and take the input build_set file and update it before it prints it to
stdout.

create: the create mode takes a buildset file and src/build/install parameters
and creates the build shell environment similar to the build mode but without
building any projects

pull: in Pull mode build_shell will try and update the projects specified by in
buildset file for the matching sub-directories given by the -s parameter

build: in Build mode build_shell will try and build all the projects defined in
the build_set file. It will build them in subdirectories of -b mathching the
directories in -s. It will ignore directories not mentioned in the buildset
file.

To play around with build_shell try configuring it with
--enable-developer-build. This will setup defines while building so that there
wont be a need to install anything.
